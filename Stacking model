import numpy as np
import pandas as pd
import xgboost as xgb
import joblib 
from sklearn.ensemble import RandomForestRegressor, StackingRegressor
from sklearn.linear_model import Ridge
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import mean_squared_error, r2_score

# 加载数据集
data = pd.read_csv('E:/xiejh/master_paper/Crop_Environment/FR_Model/maize/maize_yieldS.csv')

# 选择特征列和目标变量列
features = [
    'ET','LAI','NDVI','AT','bdod', 'cec', 'clay', 
    'TNC', 'ocs', 'pH(H2O)', 'precip',
    'sand', 'silt', 'soc','NO2','N2O'
]
target = 'Yield'

# 处理缺失值（删除缺失值行）
data = data.dropna(subset=features + [target])

# 提取特征和目标变量
X = data[features]
y = data[target]

# 分割数据集为训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 定义基础模型
xgb_model = joblib.load('E:/xiejh/master_paper/Crop_Environment/XGB_Model/best_xgb_model.pkl')
rf_model = joblib.load('E:/xiejh/master_paper/Crop_Environment/FR_Model/RFRbest_rf_model.pkl')

# 定义堆叠模型
stacking_model = StackingRegressor(
    estimators=[('xgb', xgb_model), ('rf', rf_model)],
    final_estimator=Ridge(),
    cv=5,
    n_jobs=-1
)

# 训练堆叠模型
stacking_model.fit(X_train, y_train)

# 交叉验证评估
cv_scores = cross_val_score(stacking_model, X_train, y_train, cv=5, scoring='neg_mean_squared_error')
cv_mse = -cv_scores.mean()
cv_r2 = cross_val_score(stacking_model, X_train, y_train, cv=5, scoring='r2').mean()

# 预测
y_pred_train = stacking_model.predict(X_train)
y_pred_test = stacking_model.predict(X_test)

# 评估模型性能
train_mse = mean_squared_error(y_train, y_pred_train)
test_mse = mean_squared_error(y_test, y_pred_test)
train_r2 = r2_score(y_train, y_pred_train)
test_r2 = r2_score(y_test, y_pred_test)

# 打印评估结果
print(f"Cross-Validation MSE: {cv_mse}")
print(f"Cross-Validation R²: {cv_r2}")
print(f"Train MSE: {train_mse}")
print(f"Test MSE: {test_mse}")
print(f"Train R²: {train_r2}")
print(f"Test R²: {test_r2}")

# 保存评估结果
evaluation_results_df = pd.DataFrame({
    'Set': ['Train', 'Test', 'Cross-Validation'],
    'MSE': [train_mse, test_mse, cv_mse],
    'R2': [train_r2, test_r2, cv_r2]
})
evaluation_results_df.to_csv('E:/xiejh/master_paper/Crop_Environment/FR_Model/Stacking_model/Stacking_evaluation_results.csv', index=False)

# 保存预测结果
output_train = pd.DataFrame({'Actual Yield': y_train, 'Predicted Yield': y_pred_train})
output_train.to_csv('E:/xiejh/master_paper/Crop_Environment/FR_Model/Stacking_model/Stacking_predicted_yield_train.csv', index=False)

output_test = pd.DataFrame({'Actual Yield': y_test, 'Predicted Yield': y_pred_test})
output_test.to_csv('E:/xiejh/master_paper/Crop_Environment/FR_Model/Stacking_model/Stacking_predicted_yield_test.csv', index=False)

# 保存模型
joblib.dump(stacking_model, 'E:/xiejh/master_paper/Crop_Environment/FR_Model/Stacking_model/Stacking_model.pkl')
